\part{Conclusion}
    \chapter{Learning experience}

        Creating the \emph{NetLayer} library was a very useful learning experience.

        \begin{itemize}
            \item \emph{Planning and design}: using Software Engineering guidelines and design processes was extremely educational and contributed to the quality of the project. 
            
            \item \emph{GNU/Linux containers}: using Docker containers for the database and the web application was beneficial in understanding the advantages of containers and allowed a decoupled and highly portable final result.
            
            \item \emph{\LaTeX{} and LatexPP}: using \LaTeX{} and writing a simple preprocessor for it was a very education thesis-writing and typesetting experience and definitely resulted in a higher quality final document.

            \item \emph{Networking protocols}: implementing an abstraction over networking protocols (tunnels) was imporant to understand the commonalities and key difference between existing protocols.

            \item \emph{C++14 metaprogramming}: writing metaprogramming utilities and functions from scratch was a good exercise in modern C++ metaprogramming. A new paradigm, called \emph{dependent typing} or \emph{type-value encoding}, was recently discovered and publicized by active members of the C++ community such as Paul Fultz II and Louis Dionne - NetLayer does use this paradigm for the compile-time configuration setup mechanisms.
        \end{itemize}

    \chapter{Future}
        
        \emph{NetLayer} can be greatly improved, and will probably be expanded upon and used as the forum framework for some future projects.

        Here are some possible improvements for the library modules:

        \begin{itemize}
            \item \emph{Busy loops}: instead of using loops continously running in a separate thread until a condition is met, condition variable threading primitives and more efficient construct may be used.
            
            \item \emph{Payloads}: some protocols, such as TCP, are connection-based. Having a template-based payload type may allow memory savings and performance improvements by avoiding the unnecessary specification of the sender/target address.
            
            \item \emph{Additional abstractions}: the current context host and managed host abstractions allow developers to easily create server-client architectures. Creating more distributed architectures, such as P2P, is possible in the current state of the library, but it is not as convenient. Future versions of NetLayer should have easy-to-use abstractions for P2P architectures.
            
            \item \emph{"Fixed" serialization}: when packet size is not dynamic and known in advance (at compile-time), more efficient fixed-size serialization constructs should be implemented to avoid dynaic buffer resizing while sending and receiving packets.

            \item \emph{AutoSyncGen integration}: one of my other projects, AutoSyncGen, is a networking library that allows users to automatically synchronize data structures using delta compression. Since this is a very widely used compression method, it would be convenient for developers to be able to easily integrate AutoSyncGen with NetLayer.

            \item \emph{Removing SFML dependency}: SFML is used as a thin abstraction layer over OS sockets and OS functions. To maximize portability and efficiency of NetLayer, the functionality provided by SFML could be rewritten. SFML is a C++03 library - possible benefits of eliminating this dependency could result in a more modern interface, in more efficiency thanks to \emph{move semantics} and new modern C++ features and possibly \emph{web sockets} usage through \emph{Emscripten}.

            \item \emph{Lock-free data structures}: currently, a \emph{lock-based} thread-safe queue is used to receive and send payloads. Lock-free data structures could improve performance, since locking and unlocking is a very expensive operation.

            \item \emph{Encrypted tunnels}: secure, encrypted tunnels, could be provided by default with the library. 

            \item \emph{Composable tunnels}: generalizing tunnels even more, by allowing composition, could make the underyling data transfer process much more flexible and powerful. Encryption, for example, could be a component or modifier that could be attached to any existing tunnel.

            \item \emph{boost::hana}: modern C++14 and C++17 metaprogramming should be based around the idea of \emph{dependent typing} or \emph{type-value encoding}. \emph{boost::hana}, a metaprogramming library developed by Louis Dionne, that was recently accepted in the Boost project, is currently the most advanced and powerful implementation of the aforementioned paradigm.

            \item \emph{Monadic error handling}: error handling is currently done through return values and error codes, to allow usage of NetLayer in development domains that do not use exceptions for performance reasons. \emph{Rust} and functional programming language achieve very good results by combining the performance of error codes and the composability of exceptions in \emph{monadic error handling}. 

            \item \emph{Avoid std::function overhead}: \emph{std::function}, a type-erasure-based generic wrapper around callable objects and functions, is used widely throughout the library. In some occasions, it could be possible to directly deduce the type of user-specified function objects without having to resort to possibly inefficient type-erasure.

            \item \emph{Customizable packet reliability}: some packets are very important and should be reliable. Some packets are less important and can be lost during communication. It would be very convenient for the user to have abstractions provided by NetLayer that allow choosing the desired reliability of packet types at compile-time.
        \end{itemize}

