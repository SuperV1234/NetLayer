\part{Project specifications}

    The following part of the document describes the project and its design/development process without exploring its implementation details.

    The part begins with a synthesis of the \emph{client request}. After a careful analysis of the request, a \emph{Software Requirements Specification} (SRS) was written.

    Writing a correct and informative SRS is of utmost importance to achieve an high-quality final product and ensuring the development process goes smoothly.

    The SRS will cover the following points in depth:

    \begin{itemize}
        \item \emph{Scope and purpose}.
        \item \emph{Feature and functions}.
        \item \emph{External interface requirements}.
        \item \emph{Functional requirements}.
        \item \emph{Example use cases}.
        \item \emph{Non-functional requirements}.
        \item \emph{Analysis models}.
    \end{itemize}

    \chapter{Client request}

        The client requests the design and implementation of an \emph{open-source multi-purpose C++14 networking library}.

        The library must allow the client to develop its own \emph{server-client} architectures and applications with ease, while still being performant and allowing low-level operations if required.

        The client intends to use the library as a basis for the networking layer in applications belonging to different domains, ranging from \emph{chat web applications} to \emph{real-time games and simulations}.

        The library must fulfill the following requirements:

        \begin{itemize}
            \item The library must be written in \emph{modern C++14}, making use of the latest features to improve performance, readability and flexibility.

            \item The library must target \emph{UNIX} systems, \emph{Windows} and \emph{MacOS}.

            \item The library must have a \emph{layered architecture}, allowing developers using it to go as low-level/high-level they desire.

            \item The library must deal with \emph{byte serialization} of native and user-defined classes. Nested serializable data structures must be supported.

            \item The library must provide a generic \emph{tunnel abstraction} that represents a network entity providing and receiving data. A UDP socket tunnel implementation must be provided with the library.

            \item The library must provide an high-level abstraction for \emph{server-client} multithreaded architectures, allowing applications to asynchronously interact with any number of sockets and conveniently handle received packets via function dispatching.

            \item The library must provide metaprogramming facilities to generate and bind packet types at compile-time, allowing performant code generation for serialization/deserialization and communication.

            \item The library must be released under an \emph{open-source} license and promote collaboration and external contributions.
        \end{itemize}

        The client intends using the requested library \emph{to build platforms} for various projects, both for internal company usage and public usage.

        It is imperative for the library to be easily integrable with existing legacy systems, such as architectures depending on relational databases.

        For ease of development and deployment, the client requested the library to be optionally usable in \emph{header-only} mode and compatibility with the \emph{CMake} build system.

        The abstraction provided by the library must work asynchronously by default, but an option to use blocking IO must be present.

        The client also explicitly requested a simple example application that uses the library to communicate with a \emph{MySQL database}.


    \chapter{Software Requirements Specification}

        \section{Introduction}

            \subsection{Software engineering}

                \emph{Software engineering} is the study and an application of engineering to the design, development, and maintenance of software.

                The Bureau of Labor Statistics' definition is Research, design, develop, and test operating systems-level software, compilers, and network distribution software for medical, industrial, military, communications, aerospace, business, scientific, and general computing applications.

                Typical formal definitions of software engineering are:

                \begin{itemize}
                    \item The systematic application of scientific and technological knowledge, methods, and experience to the design, implementation, testing, and documentation of software.
                    \item The application of a systematic, disciplined, quantifiable approach to the development, operation, and maintenance of software.
                    \item An engineering discipline that is concerned with all aspects of software production.
                    \item The establishment and use of sound engineering principles in order to economically obtain software that is reliable and works efficiently on real machines.
                \end{itemize}

                \subsubsection{Background}

                    The term \emph{software engineering} goes back to the '60s, when more complex programs started to be developed by teams composed by experts.

                    There was a radical transformation of software: from \emph{artisan product} to \emph{industrial product}.

                    A software engineer needs to be a good programmer, an algorithm and data structures expert with good knowledge of one or more programming languages.

                    He needs to know various design processes, must have the ability to convert generic requirements in well-detailed and accurate specifications, and needs to be able to communicate with the end-user in a language comprehensible to him comprehensible.

                    Software engineering, is, however, a discipline that's still evolving. There still are no definitive standards for the software development process.

                    Compared to traditional engineering, which is based upon mathematics and solid methods and where well-defined standards need to be followed, software engineering is greatly dependent on personal experience rather than mathematical tools.

                    Here's a brief history of software engineering:

                    \begin{itemize}
                        \item \emph{1950s}: Computers start to be used extensively in business applications.
                        \item \emph{1960s}: The first software product is marketed.

                        IBM announces its unbundling in June 1969.
                        \item \emph{1970s}: Software products are now regularly bought by normal users.

                        The software development industry grows rapidly despite the lack of financing.

                        The first software houses begin to emerge.
                    \end{itemize}

                \subsubsection{Differences with programming}

                    \begin{itemize}
                        \item A programmer writes a complete program.
                        \item A software engineer writes a software component that will be combined with components written by other software engineers to build a system.
                    \end{itemize}

                    \begin{itemize}
                        \item Programming is primarily a personal activity.
                        \item Software engineering is essentially a team activity.
                    \end{itemize}

                    \begin{itemize}
                        \item Programming is just one aspect of software development.
                        \item Large software systems must be developed similar to other engineering practices.
                    \end{itemize}

            \subsection{SRS}

                This \emph{Software Requirements Specification} (SRS) chapter contains all the information needed by software engineers and project managers to design and implement the requested forum creation/management framework.

                The SRS was written following the \emph{Institute of Electrical and Electronics Engineers} (IEEE) guidelines on SRS creation.

            \subsection{Purpose}
                The SRS chapter is contained in the \emph{non-technical} part of the thesis.

                Its purpose is providing a \emph{comprehensive description} of the objective and environment for the software under development.

                The SRS fully describes \emph{what the software will do} and \emph{how it will be expected to perform}.

            \subsection{Scope}

                \subsubsection{Identity}
                    The software that will be designed and produced will be called \emph{NetLayer}.

                \subsubsection{Feature extents}

                    The complete product will:

                    \begin{itemize}
                        \item Provide a library for the \emph{development of multi-purpose network applications and architectures}.
                        \item Provide abstractions for all the major  \emph{operating systems' networking layer}.
                        \item Provide an extensible and flexible  \emph{data serialization} module for primitive and user-defined classes.
                    \end{itemize}

                    NetLayer, however, will not be a complete framework for the development of applications. Every part of an application that does not deal with networking issues will not be covered by the product.

                \subsubsection{Benefits and objectives}

                    Development using NetLayer will give companies and individuals several benefits over \"from-scratch\" development.

                    \begin{itemize}
                        \item Usage of NetLayer will provide access to an \emph{easy-to-integrate} and \emph{easy-to-use} networking library.
                        \item Development and testing time will be \emph{significantly reduced}.
                        \item Code making use of the library will be \emph{modern, efficient and readable} thanks to C++14 features and abstractions.
                    \end{itemize}

        \section{General description}
            \subsection{Product perspective and functions}
                The product shares many basic aspects and features with existing networking libraries, improving upon them in the following ways:

                \begin{itemize}
                    \item A layer-based architecture allows developers to make use of both low-level constructs and operations and high-level abstractions in the same application.
                    \item The library will optionally allow developers to use a programming style similar to \emph{functional programming}, making use of callbacks and first-class functions to deal with packet management and function dispatching.
                    \item
                \end{itemize}

            \subsection{User characteristics}
                NetLayer is targeted towards modern C++ developers experienced with C++11 and C++14 features. The library makes heavy use of modern metaprogramming paradigms and techniques - unfamiliar users will not be able to make full use of the library.

                A \"more functional\" interface is provided where possible, allowing users to use convenient abstractions for data serialization functions and networking functions.

                Familiarity with multithreading and synchronous computation is also required to use the library.

        \section{Glossary}

            The following list contains all the main elements that compose the architecture of NetLayer.

            \begin{itemize}
                \item \emph{Packet Buffer}: dynamically resizable buffer that can store and provide serialized generic data.
                \item \emph{Address}: union of an IP address and a port.
                \item \emph{Payload}: abstraction consisting of an Address and a  Packet Buffer. It can be sent to and received by Tunnel instances.
                \item \emph{Tunnel}: abstraction of a Payload provider/receiver. The default Tunnel is an UDP socket.
                \item \emph{Thread Safe Queue}: a lock-based thread safe queue that supports concurrent enqueueing and dequeueing.
                \item \emph{Managed Packet Buffer}: abstraction consisting of a Thread Safe Queue and a reference to a Tunnel. It can be either a \emph{Managed Receive Buffer}, which enqueues received data from the tunnel, or a \emph{Managed Send Buffer}, which enqueues data that will be sent through the tunnel.
                \item \emph{Managed Host}: union of an Address, a Tunnel, a Managed Receive Buffer and a Managed Send Buffer. Represents a network entity capable of sending and receiving data through a tunnel.
                \item \emph{Serializable}: abstraction over a tuple of generic types that automatically allows the user to serialize and deserialize data. Serializable packets can also be nested and contain dynamically-resizable data structures.
                \item \emph{Packet Bind}: compile-time bind of a Serializable to a Packet type. Used to generate a dispatch table.
                \item \emph{Dispatch Table}: compile-time function table that binds a function to specific packet binds. Used to handle received packets.
                \item \emph{Context Managed Host}: union of a managed host and a dispatch table.
            \end{itemize}

        \section{Specific requirements}

            \subsection{External interface requirements}

                \emph{External interface requirements} identify and document the interfaces to other systems and external entities within the project scope.

                \subsubsection{User interfaces}
                    The product will not provide any graphical user interface. The users of the library will be able to access its functions and types using C++14.

                \subsubsection{Software interfaces}
                    The \emph{open-source policy} of NetLayer will allow its users to expand or improve existing functionality and to interact with other existing technologies.

            \subsection{Functional requirements}
                In software engineering, a \emph{functional requirement} defines a function of a system and its components.

                Functional requirements may be \emph{calculations}, \emph{technical details}, \emph{data manipulation and processing} and other specific functionality that define what a system is supposed to accomplish.

                Behavioral requirements describing all the cases where the system uses the functional requirements are captured in \emph{use cases}.

                \subsubsection{Packet management}
                    \begin{itemize}
                        \item \emph{Payloads and thread-safe queue}: an abstraction consisting of an address and data is provided, along with a thread-safe queue that is used for sending/receiving data to/from the network in managed buffers.
                        \item \emph{Managed buffers}: payloads will be enqueued and dequeued in managed buffers, that allow to asynchronously access the contents of their queue.
                    \end{itemize}

                    
                    \begin{figure}[!htb]
                    \caption{Managed buffer example diagram.}
                    \centering
                    \includegraphics[width=0.85\textwidth]{d/other/managedbuf.png}
                    \end{figure}

                 \subsubsection{Data serialization}
                    \begin{itemize}
                        \item \emph{Fundamental types}: fundamental C++ type serialization will automatically be provided by the library.
                        \item \emph{Common C++ classes}: serialization for commonly used C++ classes, such as \mintinline{cpp}{std::vector} and \mintinline{cpp}{std::array}, is provided by default.
                        \item \emph{Extensible serialization}: library user will be able to extend the serialization system with their own types, using simple class inheritance or macros for convenience.
                    \end{itemize}

                    
                    \begin{figure}[!htb]
                    \caption{Automatic serialization hierarchy.}
                    \centering
                    \includegraphics[width=1\textwidth]{d/other/serialization.png}
                    \end{figure}

                  \subsubsection{Tunnel management}
                    \begin{itemize}
                        \item \emph{Default tunnel - UDP}: a tunnel implementation, wrapping an UDP socket, is provided by default.
                        \item \emph{Default tunnel - mock}: a mock tunnel, for unit-testing purposes, is provided by default.
                        \item \emph{Tunnel interface}: an extensible tunnel interface is provided, allowing the users of the library to implement their own network tunnels.
                    \end{itemize}

                    \begin{figure}[!htb]
                    \caption{Tunnel example diagram.}
                    \centering
                    \includegraphics[width=0.85\textwidth]{d/other/tunnel.png}
                    \end{figure}

                \subsubsection{Context binding}
                 \begin{itemize}
                        \item \emph{Managed hosts}: abstraction consisting of a send managed buffer and a receive managed buffer. Allows the user to add processing threads and to poll the buffers for received data.
                        \item \emph{Dispatch table}: an extensible table, configurable at compile-time, is provided to allow the user to define functions which will automatically handle specific packet types.
                        \item \emph{Context host}: union of a managed host and a dispatch table. Provides a convenient interface to quickly develop a server/client architecture capable of sending and receiving payloads.
                    \end{itemize}

                \begin{figure}[!htb]
                    \caption{Context host diagram.}
                    \centering
                    \includegraphics[width=0.85\textwidth]{d/other/ctxhost.png}
                    \end{figure}

            \newpage

            \subsection{Example use cases}
                In software and systems engineering, a \emph{use case} is a list of steps, typically defining interactions between one or more actors and a system, to achieve a goal.

                In the following examples, we'll cover possible use cases for two different developer types using NetLayer:

                \begin{itemize}
                            \item \emph{Networking layer developer}: developer managing packet types, tunnel types and their bindings.
                            \item \emph{Application layer developer}: developer managing application logic, making use of existing NetLayer bindings.
                        \end{itemize}

                \subsubsection{Defining tunnel types}
                    
                    Defining tunnel types is a low-level operation done by networking layer developers. It allows NetLayer users to implement their own protocols or mock payload providers/receivers.

                    \paragraph{Actors}
                        \begin{itemize}
                            \item Networking layer developer.
                            \item NetLayer library.
                        \end{itemize}

                    \paragraph{Pre-conditions}
                        \begin{itemize}
                            \item NetLayer was correctly included.
                        \end{itemize}

                    \paragraph{Post-conditions}
                        \begin{itemize}
                            \item An usable tunnel type for context hosts or manual payload management was defined.
                        \end{itemize}

                    \begin{figure}[H]
                    \caption{Defining tunnel types - use case diagram.}
                    \centering
                    \includegraphics[width=0.65\textwidth]{d/uc/def_tunnels.png}
                    \end{figure}

                \subsubsection{Defining serializable types}
                    
                    Serializable types will be usually defined by networking layer developers and used by both types of developers. 
                    Fundamental types are automatically serializable. Tuples of fundamental types can be marked as serializable and wrapped in custom interfaces using either compile-time inheritance or helper preprocessor macros.

                    \paragraph{Actors}
                        \begin{itemize}
                            \item Networking layer developer.
                            \item Application layer developer.
                            \item NetLayer library.
                        \end{itemize}

                    \paragraph{Pre-conditions}
                        \begin{itemize}
                            \item NetLayer was correctly included.
                        \end{itemize}

                    \paragraph{Post-conditions}
                        \begin{itemize}
                            \item Any number of serializable types were defined.
                            \item Defined types can be sent/received through tunnels.
                            \item Defined types can be used as normal C++ types.
                        \end{itemize}

                    \begin{figure}[H]
                    \caption{Defining serializable types - use case diagram.}
                    \centering
                    \includegraphics[width=0.65\textwidth]{d/uc/def_serializable_t.png}
                    \end{figure}


                \subsubsection{Binding types to dispatch table}
                    
                    The creation and management of a dispatch table is usually handled by networking layer developers. They will define and bind all packet types that can be received and sent by the application.

                    \paragraph{Actors}
                        \begin{itemize}
                            \item Networking layer developer.
                            \item NetLayer library.
                        \end{itemize}

                    \paragraph{Pre-conditions}
                        \begin{itemize}
                            \item NetLayer was correctly included.
                        \end{itemize}

                    \paragraph{Post-conditions}
                        \begin{itemize}
                            \item A dispatch table was defined.
                            \item Functions can now be assigned to every inbound payload type.
                        \end{itemize}

                    \begin{figure}[H]
                    \caption{Binding types to dispatch table - use case diagram.}
                    \centering
                    \includegraphics[width=0.65\textwidth]{d/uc/bind_types.png}
                    \end{figure}


                \subsubsection{Defining a context host}
                    
                    After the creation of a dispatch table, the definition of a context host is required. A context host is the union of a dispatch table and a managed host.

                    \paragraph{Actors}
                        \begin{itemize}
                            \item Networking layer developer.
                            \item NetLayer library.
                        \end{itemize}

                     \paragraph{Pre-conditions}
                        \begin{itemize}
                            \item NetLayer was correctly included.
                            \item A dispatch table was created.
                            \item A tunnel type was chosen.
                        \end{itemize}

                    \paragraph{Post-conditions}
                        \begin{itemize}
                            \item An usable context host was defined.
                            \item A previously defined dispatch table is now bound to the context host.
                            \item The context host can now send/receive bound payload types.
                        \end{itemize}

                    \begin{figure}[H]
                    \caption{Defining a context host - use case diagram.}
                    \centering
                    \includegraphics[width=0.65\textwidth]{d/uc/def_context_host.png}
                    \end{figure}


                \subsubsection{Handling incoming payloads}
                    
                    Incoming payloads can be either handled by managed hosts, bypassing the dispatch table, or by context hosts. 
                    Context hosts automatically call a bound function depending on the type of the received payload.

                    \paragraph{Actors}
                        \begin{itemize}
                            \item Networking layer developer.
                            \item Application layer developer.
                            \item NetLayer library.
                        \end{itemize}

                    \paragraph{Pre-conditions}
                        \begin{itemize}
                            \item NetLayer was correctly included.
                            \item A context host was defined.
                            \item Payload types were bound to dispatch table.
                        \end{itemize}

                    \paragraph{Post-conditions}
                        \begin{itemize}
                            \item Incoming payloads were handled or an error occurred.
                        \end{itemize}

                    \begin{figure}[H]
                    \caption{Handling incoming payloads - use case diagram.}
                    \centering
                    \includegraphics[width=0.65\textwidth]{d/uc/inc_payloads.png}
                    \end{figure}



                \subsubsection{Handling outgoing payloads}
                    
                    Outgoing packets can be sent both by managed hosts and context hosts. Context hosts provide functionality to mark the type of the packet, so that receivers can handle it thanks to dispatch tables.

                    \paragraph{Actors}
                        \begin{itemize}
                            \item Networking layer developer.
                            \item Application layer developer.
                            \item NetLayer library.
                        \end{itemize}

                    \paragraph{Pre-conditions}
                        \begin{itemize}
                            \item NetLayer was correctly included.
                            \item A context host was defined.
                            \item Payload types were bound to dispatch table.
                        \end{itemize}

                    \paragraph{Post-conditions}
                        \begin{itemize}
                            \item Outgoing payloads were sent or an error occurred.
                        \end{itemize}

                    \begin{figure}[H]
                    \caption{Handling outgoing payloads - use case diagram.}
                    \centering
                    \includegraphics[width=0.75\textwidth]{d/uc/outgoing.png}
                    \end{figure}



            \newpage

            \subsection{Non-functional requirements}
                Functional requirements are supported by \emph{non-functional requirements} (also known as quality requirements), which impose constraints on the design or implementation (such as performance requirements, security, or reliability).

                \subsubsection{Performance}
                    The system will be designed from the ground-up with emphasis on performance. 

                    The layered architecture will allow users to follow the \emph{pay only what you use} principle, which is one of C++'s biggest selling points.

                    NetLayer tries to do as much as possible during compilation, avoiding unnecessary run-time polymorphism overhead.

                \subsubsection{Reliability}
                    The system will have to be reliable and keep working in case of errors.

                    Since NetLayer is a general-purpose library, intended for use in multiple domains, \emph{exceptions are not used} throughout the library. 
                    Real-time simulation and game development industries prefer avoiding using exceptions because they unfortunately always bring a small amount of runtime overhead, even when rarely used throughout the program.

                    NetLayer will allow users to define and use their preferred error handling systems.

                \subsubsection{Security}

                    Encryption and other security features are out of NetLayer's scope - users can implement them on top of the library if necessary.

                \subsubsection{Maintainability and portability}
                    Being an open-source project, \emph{maintainability}, \emph{extensibility} and \emph{portability} are key.

                    The code layer will be carefully designed and organized to allow easy maintenance, bugfixing and feature addition.

                    To ensure maximum portability, the product will be designed to work on the most popular \emph{GNU/Linux} distributions and will be thoroughly tested on different platforms.

        \section{Analysis models}
            \subsection{Activity diagrams}
                Activity diagrams are graphical representations of workflows of stepwise activities and actions with support for choice, iteration and concurrency.
                In the Unified Modeling Language, activity diagrams are intended to model both computational and organisational processes (i.e. workflows).
                Activity diagrams show the overall flow of control.

%                \newpage
%\\

\bigskip
                The following diagram shows the required steps to define a serializable type.

                \begin{figure}[H]
                %\caption{}
                \centering
                \includegraphics[width=0.7\textwidth]{d/ac/def_ser.png}
                \end{figure}



                %\newpage
                %\\
                The following diagram shows the required steps to serialize an object into a payload.

                \begin{figure}[H]
                %\caption{}
                \centering
                \includegraphics[width=0.7\textwidth]{d/ac/def_ser_obj.png}
                \end{figure}





                %\newpage
                %\\
                The following diagram shows the required steps to deserialize a payload into an object.

                \begin{figure}[H]
                %\caption{}
                \centering
                \includegraphics[width=0.7\textwidth]{d/ac/def_deserialize_obj.png}
                \end{figure}





               % \newpage
               %\\
                The following diagram shows the required steps to define a tunnel.

                \begin{figure}[H]
                %\caption{}
                \centering
                \includegraphics[width=0.7\textwidth]{d/ac/def_tunnel.png}
                \end{figure}






                \newpage
                %\\
                The following diagram shows the required steps to create a managed host.

                \begin{figure}[H]
                %\caption{}
                \centering
                \includegraphics[width=0.7\textwidth]{d/ac/def_manhost.png}
                \end{figure}





                \newpage
                %\\
                The following diagram shows the required steps to create and bind a dispatch table.

                \begin{figure}[H]
                %\caption{}
                \centering
                \includegraphics[width=0.7\textwidth]{d/ac/disptable.png}
                \end{figure}





\newpage
                %\\
                The following diagram shows the required steps to create a context host.

                \begin{figure}[H]
                %\caption{}
                \centering
                \includegraphics[width=0.7\textwidth]{d/ac/conthost.png}
                \end{figure}





                \newpage
                %\\
                The following diagram shows the required steps to receive a bound payload.

                \begin{figure}[H]
                %\caption{}
                \centering
                \includegraphics[width=0.7\textwidth]{d/ac/send_p.png}
                \end{figure}





                \newpage
                %\\
                The following diagram shows the required steps to send a bound payload.

                \begin{figure}[H]
                %\caption{}
                \centering
                \includegraphics[width=0.7\textwidth]{d/ac/recv_p.png}
                \end{figure}





                %   \newpage
                \newpage

            \subsection{Class diagrams}

                \emph{Class diagrams} are created using UML.

                The \emph{Unified Modeling Language} (UML) is a general-purpose modeling language in the field of software engineering, which is designed to provide a standard way to visualize the design of a system.

                It offers a way to visualize a system's architectural blueprints in a diagram, including elements such as:

                \begin{itemize}
                    \item Any activities (jobs).
                    \item Individual components of the system.
                    \item And how they can interact with other software components.
                    \item How the system will run.
                    \item How entities interact with others (components and interfaces).
                    \item External user interface.
                \end{itemize}

                \begin{figure}[H]
                \caption{NetLayer complete class diagram.}
                \centering
                \includegraphics[width=0.9\textwidth]{d/coll/src.png}
                \end{figure}

                \newpage

                \begin{figure}[H]
                \caption{Managed buffer collaboration diagram.}
                \centering
                \includegraphics[width=0.5\textwidth]{d/coll/coll_pcktbuf.png}
                \end{figure}

                \newpage

                \begin{figure}[H]
                \caption{Managed host collaboration diagram.}
                \centering
                \includegraphics[width=0.5\textwidth]{d/coll/coll_manhost.png}
                \end{figure}

                \newpage

                \begin{figure}[H]
                \caption{Context host collaboration diagram.}
                \centering
                \includegraphics[width=0.4\textwidth]{d/coll/coll_ctxhost.png}
                \end{figure}

                \newpage

                \begin{figure}[H]
                \caption{Dispatch table collaboration diagram.}
                \centering
                \includegraphics[width=0.5\textwidth]{d/coll/coll_disptab.png}
                \end{figure}

                \newpage                
